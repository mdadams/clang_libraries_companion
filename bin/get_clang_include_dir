#! /usr/bin/env python

# Copyright (c) 2025 Michael D. Adams

import sys
import os
import subprocess
import glob

debug_level=0

def eprint(*args, **kwargs):
    print(*args, file = sys.stderr, **kwargs)

def run_program(args):
    try:
        result = subprocess.run(args, stdout=subprocess.PIPE,
          stderr=subprocess.PIPE, text=True, check=True)
        if result.returncode == 0:
            return {"status": result.returncode, "stdout": result.stdout}
        return {"status": result.returncode}
    except subprocess.CalledProcessError as e:
        return {"status": -1, "exception": e}

def run_clang_print_resource_dir(clang_program_path):
    if debug_level >= 1:
        eprint(f"running: {clang_program_path} -print-resource-dir")
    args = [clang_program_path, "-print-resource-dir"]
    run_result = run_program(args)
    if run_result["status"] != 0:
        return None
    resource_dir = run_result["stdout"].splitlines()[0]
    return resource_dir

def get_clang_globs():
    return [
        "clang++",
        "clang++-*",
    ]

def get_clang_resource_dir():
    cxx = os.environ.get("CXX")
    if cxx is not None:
        resource_dir = run_clang_print_resource_dir(cxx)
        if resource_dir is not None:
            return resource_dir
    search_path = os.environ.get("PATH", "").split(os.pathsep)
    for pattern in get_clang_globs():
        for dir_path in search_path:
            full_pattern = dir_path + os.path.sep + pattern
            for target in glob.glob(full_pattern):
                resource_dir = run_clang_print_resource_dir(target)
                if resource_dir is not None:
                    return resource_dir
    return None

def main():
    global debug_level
    debug = os.environ.get("CL_GET_CLANG_INCLUDE_DIR_DEBUG")
    if debug is not None:
        debug_level = 1
    include_dir = os.environ.get("CL_CLANG_INCLUDE_DIR")
    if include_dir is None:
        resource_dir = get_clang_resource_dir()
        include_dir = resource_dir + os.path.sep + "include"
    print(include_dir)

if __name__ == "__main__":
    sys.exit(main())
